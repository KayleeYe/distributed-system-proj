package main

//
// a MR application you need to develop
// go build -buildmode=plugin credit.go
//

import (
	"cs350/mr"
	"strconv"
	"strings"
)

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	// your inplementation here
	//map run documents，userid，agency， year，creditscore
	//split by , content
	//put in array
	//array[0]=userid
	//array[1]=agency...
	//var kva []mr.KeyValue
	doc := strings.Split(contents, "\n")
	var kva []mr.KeyValue
	for _, one := range doc {
		words := strings.Split(one, ",")
		if len(words) < 4 {
			continue
		}
		year, err := strconv.Atoi(words[2])
		if err != nil {
			continue
		}
		creditScore, err := strconv.Atoi(words[3])
		if err != nil {
			continue
		}
		if year == 2023 && creditScore > 400 {
			kva = append(kva, mr.KeyValue{Key: words[1], Value: "1"})
		}
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// your inplementation here
	//run one kye at a time, add all values in list from different bucket together
	//var count int
	count := 0
	for _, v := range values {
		i, err := strconv.Atoi(v)
		if err == nil {
			count += i
		}
	}
	return strconv.Itoa(count)
}
